class Student:
    def __init__(self, enrollment_id, name):
        self.enrollment_id = enrollment_id
        self.name = name

class Node:
    def __init__(self, student):
        self.student = student
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None
        
    def get_height(self, root):
        return root.height if root else 0

    def get_balance(self, root):
        return self.get_height(root.left) - self.get_height(root.right) if root else 0

    def right_rotate(self, y):
        x = y.left
        T2 = x.right
        x.right = y
        y.left = T2
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        return x

    def left_rotate(self, x):
        y = x.right
        T2 = y.left
        y.left = x
        x.right = T2
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        return y
    def insert(self, root, student):
        if not root:
            return Node(student)
        if student.enrollment_id < root.student.enrollment_id:
            root.left = self.insert(root.left, student)
        elif student.enrollment_id > root.student.enrollment_id:
            root.right = self.insert(root.right, student)
        else:
            return root 

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        balance = self.get_balance(root)

        if balance > 1 and student.enrollment_id < root.left.student.enrollment_id:
            return self.right_rotate(root)
        if balance < -1 and student.enrollment_id > root.right.student.enrollment_id:
            return self.left_rotate(root)
        if balance > 1 and student.enrollment_id > root.left.student.enrollment_id:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        if balance < -1 and student.enrollment_id < root.right.student.enrollment_id:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    def min_value_node(self, root):
        while root.left:
            root = root.left
        return root
    def delete(self, root, enrollment_id):
        if not root:
            return root
        if enrollment_id < root.student.enrollment_id:
            root.left = self.delete(root.left, enrollment_id)
        elif enrollment_id > root.student.enrollment_id:
            root.right = self.delete(root.right, enrollment_id)
        else:
            if not root.left:
                return root.right
            elif not root.right:
                return root.left
            temp = self.min_value_node(root.right)
            root.student = temp.student
            root.right = self.delete(root.right, temp.student.enrollment_id)

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        balance = self.get_balance(root)
        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.right_rotate(root)
        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.left_rotate(root)
        if balance < -1 and self.get_balance(root.right) > 0:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    def search(self, root, enrollment_id):
        if not root or root.student.enrollment_id == enrollment_id:
            return root
        if enrollment_id < root.student.enrollment_id:
            return self.search(root.left, enrollment_id)
        return self.search(root.right, enrollment_id)
    def inorder(self, root):
        if not root:
            return []
        return self.inorder(root.left) + [(root.student.enrollment_id, root.student.name)] + self.inorder(root.right)
    def count_nodes(self, root):
        if not root:
            return 0
        return 1 + self.count_nodes(root.left) + self.count_nodes(root.right)
if __name__ == "__main__":
    tree = AVLTree()
    root = None
    root = tree.insert(root, Student(102, "Alice"))
    root = tree.insert(root, Student(101, "Bob"))
    root = tree.insert(root, Student(103, "Charlie"))
    print("Inorder Traversal (Sorted by ID):", tree.inorder(root))
    print("Total Enrollments:", tree.count_nodes(root))
    s = tree.search(root, 101)
    print("Search for 101:", (s.student.enrollment_id, s.student.name) if s else "Not Found")
    root = tree.delete(root, 102)
    print("After Deletion (102):", tree.inorder(root))
    print("Total Enrollments:", tree.count_nodes(root))
